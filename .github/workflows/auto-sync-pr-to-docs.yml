name: Sync PR to Documentation

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR 번호'
        required: true
      branch:
        description: '원본 브랜치 이름'
        required: true
      title:
        description: 'PR 제목'
        required: true

jobs:
  sync-to-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set PR variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV
            echo "PR_TITLE=${{ github.event.inputs.title }}" >> $GITHUB_ENV
            echo "PR_BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
            echo "PR_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          fi

      - name: Set up Git and GitHub CLI
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Create branch and PR in target repository
        env:
          TARGET_REPO: "${{ secrets.TARGET_REPOSITORY }}"
          GITHUB_TOKEN: "${{ secrets.TARGET_REPO_TOKEN }}"
          TARGET_BRANCH: "${{ secrets.TARGET_BRANCH || 'main' }}"
          GITHUB_REPO: "${{ github.repository }}"
        run: |
          # 현재 리포지토리 이름 추출
          REPO_NAME=$(echo "$GITHUB_REPO" | cut -d'/' -f2)
          
          # 브랜치 이름 설정
          BRANCH_NAME="${REPO_NAME}-${PR_BRANCH}"
          BRANCH_NAME=$(echo $BRANCH_NAME | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          # 대상 리포지토리 클론
          git clone "https://${GITHUB_TOKEN}@github.com/${TARGET_REPO}.git" target-repo
          cd target-repo
          
          # 브랜치 생성
          git checkout -b "${BRANCH_NAME}" "${TARGET_BRANCH}"
          
          # 파일 추가
          echo "# 원본 PR 정보" > PR_INFO.md
          echo "- PR 번호: #${PR_NUMBER}" >> PR_INFO.md
          echo "- PR 제목: ${PR_TITLE}" >> PR_INFO.md
          echo "- 원본 브랜치: ${PR_BRANCH}" >> PR_INFO.md
          echo "- 원본 저장소: ${GITHUB_REPO}" >> PR_INFO.md
          echo "- 링크: https://github.com/${GITHUB_REPO}/pull/${PR_NUMBER}" >> PR_INFO.md
          
          # 커밋 및 푸시
          git add PR_INFO.md
          git commit -m "Auto-sync from ${REPO_NAME} PR #${PR_NUMBER}"
          git push origin "${BRANCH_NAME}"
          
          # GitHub CLI 인증
          echo "${GITHUB_TOKEN}" | gh auth login --with-token
          
          # PR 생성용 템플릿 파일 작성
          echo "자동으로 생성된 PR입니다." > pr_body.txt
          echo "" >> pr_body.txt
          echo "원본 저장소: ${GITHUB_REPO}" >> pr_body.txt
          echo "원본 브랜치: ${PR_BRANCH}" >> pr_body.txt
          echo "원본 PR: https://github.com/${GITHUB_REPO}/pull/${PR_NUMBER}" >> pr_body.txt
          
          # PR 생성
          gh pr create --title "[Auto] ${REPO_NAME}: ${PR_TITLE}" --body-file pr_body.txt --base "${TARGET_BRANCH}" --head "${BRANCH_NAME}" --repo "${TARGET_REPO}"
